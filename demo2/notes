th:if="${image.key} % 4 == 0"

  
   <table>
            <tr>
                <th>Id</th>
                <th>Image</th>
                <th>Name</th>
            </tr>



              
                
  <tr th:each="image : ${images}">
    <td th:text="${image.key}"></td>
    <th><img th:src="${'data:image/jpeg;charset=utf-8;base64,'+image.value}" alt=""  width="100"></th>
	<th>
	 <div th:each="imageclass:${imageclasses}">
	 <div th:if="${imageclass.id == image.key}"th:text="${imageclass.name}"/>
       
    </div>
    </th>
	
</tr>
            
          
        </table>

          <tr  > <div><pre><td th:each="image : ${images}"><img th:src="${'data:image/jpeg;charset=utf-8;base64,'+image.value}" alt=""  width="100">
  </td></pre></div>
   
    </tr>

    
    	for (let [key, value] of imageMap) {
       				if (bool)
       					{keyLast=key;
       					break;
       					}
       				if (key == keyLast )
       					{bool=1;}
       				}
       			

       			
       			
       			var request = new XMLHttpRequest();
       			request.open("GET","Base64Map.json", false);
       			request.send(null);
       			var jsonData = JSON.parse(request.responseText);
				imageMap = new Map(jsonData);
       		

       	     // read JSON directly from a file
       			
       		//var ia=JSON.parse('{"ArrayList":[{"id":1,"name":"testImage","album":{"id":1,"name":"testAlbum"}},{"id":2,"name":"testImagelarge","album":{"id":1,"name":"testAlbum"}},{"id":3,"name":"testImagelarge2","album":{"id":1,"name":"testAlbum"}}]}');
			
 //ia=bestFetch('./ImageClass.json');

  

/*const fs = require('fs');

fs.readFile('./ImageClass.json', 'utf8', (err, data) => {
  if (err) console.error(err);
  const ia = JSON.parse(data);

 
});*/

var fileia =new File('./ImageClass.json');

var reader = new FileReader();
reader.onload = function(event) {
    console.log('File content:', event.target.result);
};
var iaString=reader.readAsText(fileia);
var ia= JSON.parse(iaString);

ia.ArrayList.length+

var ia;
       		
       			ia=JSON.parse(readTextFile("./ImageClass.json"));

       			
       			
       			 async function bestFetch(pfad) {
             try {
                const first = fetch(pfad);
                let json = await first.json();
                return json;
              }
              catch(e) {
                console.log('Error!', e);
              }
             }
       	async function printJSON(pfad) {
			    const response = await fetch(pfad);
			    const json = await response.json();
			    return json;
			}
       	
       	function readTextFile(file)
       	{
       	    var rawFile = new XMLHttpRequest();
       	    rawFile.open("GET", file, false);
       	    rawFile.onreadystatechange = function ()
       	    {
       	        if(rawFile.readyState === 4)
       	        {
       	            if(rawFile.status === 200 || rawFile.status == 0)
       	            {
       	                var allText = rawFile.responseText;
       	                return allText;
       	            }
       	        }
       	    }
       	    rawFile.send(null);
       	}
       	
       	
       	
       	const fs = require("fs");

       		
       			fs.readFile("/home/jon/Downloads/demo2/ImageClass.json", (err, data) => {
       			  if (err) throw err;

       			  console.log(data.toString());
       			});
       			
       			
       			<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
       			
       			
       			
       			
       			
       			
       			
       			<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
  
   <form method="post" th:action="@{/upload}" enctype="multipart/form-data">


  
                       
                        
                      
  <input type="file" name="file" accept="image/jpeg" class="form-control-file" >
   
      
 <input type="text" th:value="${images.name}" name="name"/>                    
             
<select class="form-control" id="dropDownList" th:field="${imagePath.albumId}">
    
    <option th:each="option : ${albums}" th:value="${option.id}" th:text="${option.name}" ></option>
</select>
         
<!--    <button type="submit" class="btn btn-primary">Sign in</button> -->

<input type="submit" value="Submit" class="btn btn-primary" />
</body>


</html>
